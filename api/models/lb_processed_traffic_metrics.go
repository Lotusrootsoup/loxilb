// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LbProcessedTrafficMetrics lb processed traffic metrics
//
// swagger:model LbProcessedTrafficMetrics
type LbProcessedTrafficMetrics struct {

	// lb rule interaction bytes
	LbRuleInteractionBytes []*LbProcessedTrafficMetricsLbRuleInteractionBytesItems0 `json:"lb_rule_interaction_bytes"`

	// lb rule interaction packets
	LbRuleInteractionPackets []*LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0 `json:"lb_rule_interaction_packets"`
}

// Validate validates this lb processed traffic metrics
func (m *LbProcessedTrafficMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLbRuleInteractionBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLbRuleInteractionPackets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbProcessedTrafficMetrics) validateLbRuleInteractionBytes(formats strfmt.Registry) error {
	if swag.IsZero(m.LbRuleInteractionBytes) { // not required
		return nil
	}

	for i := 0; i < len(m.LbRuleInteractionBytes); i++ {
		if swag.IsZero(m.LbRuleInteractionBytes[i]) { // not required
			continue
		}

		if m.LbRuleInteractionBytes[i] != nil {
			if err := m.LbRuleInteractionBytes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lb_rule_interaction_bytes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lb_rule_interaction_bytes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LbProcessedTrafficMetrics) validateLbRuleInteractionPackets(formats strfmt.Registry) error {
	if swag.IsZero(m.LbRuleInteractionPackets) { // not required
		return nil
	}

	for i := 0; i < len(m.LbRuleInteractionPackets); i++ {
		if swag.IsZero(m.LbRuleInteractionPackets[i]) { // not required
			continue
		}

		if m.LbRuleInteractionPackets[i] != nil {
			if err := m.LbRuleInteractionPackets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lb_rule_interaction_packets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lb_rule_interaction_packets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this lb processed traffic metrics based on the context it is used
func (m *LbProcessedTrafficMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLbRuleInteractionBytes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLbRuleInteractionPackets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LbProcessedTrafficMetrics) contextValidateLbRuleInteractionBytes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LbRuleInteractionBytes); i++ {

		if m.LbRuleInteractionBytes[i] != nil {
			if err := m.LbRuleInteractionBytes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lb_rule_interaction_bytes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lb_rule_interaction_bytes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LbProcessedTrafficMetrics) contextValidateLbRuleInteractionPackets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LbRuleInteractionPackets); i++ {

		if m.LbRuleInteractionPackets[i] != nil {
			if err := m.LbRuleInteractionPackets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lb_rule_interaction_packets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lb_rule_interaction_packets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LbProcessedTrafficMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbProcessedTrafficMetrics) UnmarshalBinary(b []byte) error {
	var res LbProcessedTrafficMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LbProcessedTrafficMetricsLbRuleInteractionBytesItems0 lb processed traffic metrics lb rule interaction bytes items0
//
// swagger:model LbProcessedTrafficMetricsLbRuleInteractionBytesItems0
type LbProcessedTrafficMetricsLbRuleInteractionBytesItems0 struct {

	// dip
	Dip string `json:"dip,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// sip
	Sip string `json:"sip,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this lb processed traffic metrics lb rule interaction bytes items0
func (m *LbProcessedTrafficMetricsLbRuleInteractionBytesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this lb processed traffic metrics lb rule interaction bytes items0 based on context it is used
func (m *LbProcessedTrafficMetricsLbRuleInteractionBytesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LbProcessedTrafficMetricsLbRuleInteractionBytesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbProcessedTrafficMetricsLbRuleInteractionBytesItems0) UnmarshalBinary(b []byte) error {
	var res LbProcessedTrafficMetricsLbRuleInteractionBytesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0 lb processed traffic metrics lb rule interaction packets items0
//
// swagger:model LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0
type LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0 struct {

	// dip
	Dip string `json:"dip,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// sip
	Sip string `json:"sip,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this lb processed traffic metrics lb rule interaction packets items0
func (m *LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this lb processed traffic metrics lb rule interaction packets items0 based on context it is used
func (m *LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0) UnmarshalBinary(b []byte) error {
	var res LbProcessedTrafficMetricsLbRuleInteractionPacketsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
