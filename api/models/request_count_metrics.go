// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RequestCountMetrics request count metrics
//
// swagger:model RequestCountMetrics
type RequestCountMetrics struct {

	// total requests
	TotalRequests float64 `json:"total_requests,omitempty"`

	// total requests per service
	TotalRequestsPerService []*RequestCountMetricsTotalRequestsPerServiceItems0 `json:"total_requests_per_service"`
}

// Validate validates this request count metrics
func (m *RequestCountMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTotalRequestsPerService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestCountMetrics) validateTotalRequestsPerService(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalRequestsPerService) { // not required
		return nil
	}

	for i := 0; i < len(m.TotalRequestsPerService); i++ {
		if swag.IsZero(m.TotalRequestsPerService[i]) { // not required
			continue
		}

		if m.TotalRequestsPerService[i] != nil {
			if err := m.TotalRequestsPerService[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_requests_per_service" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total_requests_per_service" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this request count metrics based on the context it is used
func (m *RequestCountMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTotalRequestsPerService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestCountMetrics) contextValidateTotalRequestsPerService(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TotalRequestsPerService); i++ {

		if m.TotalRequestsPerService[i] != nil {
			if err := m.TotalRequestsPerService[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_requests_per_service" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total_requests_per_service" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestCountMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestCountMetrics) UnmarshalBinary(b []byte) error {
	var res RequestCountMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RequestCountMetricsTotalRequestsPerServiceItems0 request count metrics total requests per service items0
//
// swagger:model RequestCountMetricsTotalRequestsPerServiceItems0
type RequestCountMetricsTotalRequestsPerServiceItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this request count metrics total requests per service items0
func (m *RequestCountMetricsTotalRequestsPerServiceItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this request count metrics total requests per service items0 based on context it is used
func (m *RequestCountMetricsTotalRequestsPerServiceItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestCountMetricsTotalRequestsPerServiceItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestCountMetricsTotalRequestsPerServiceItems0) UnmarshalBinary(b []byte) error {
	var res RequestCountMetricsTotalRequestsPerServiceItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
