// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BGPPolicydefinitionstatement b g p policydefinitionstatement
//
// swagger:model BGPPolicydefinitionstatement
type BGPPolicydefinitionstatement struct {

	// actions
	Actions *BGPPolicydefinitionstatementActions `json:"actions,omitempty"`

	// conditions
	Conditions *BGPPolicydefinitionstatementConditions `json:"conditions,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this b g p policydefinitionstatement
func (m *BGPPolicydefinitionstatement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatement) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatement) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	if m.Conditions != nil {
		if err := m.Conditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policydefinitionstatement based on the context it is used
func (m *BGPPolicydefinitionstatement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatement) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	if m.Actions != nil {
		if err := m.Actions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatement) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conditions != nil {
		if err := m.Conditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatement) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActions b g p policydefinitionstatement actions
//
// swagger:model BGPPolicydefinitionstatementActions
type BGPPolicydefinitionstatementActions struct {

	// bgp actions
	BgpActions *BGPPolicydefinitionstatementActionsBgpActions `json:"bgpActions,omitempty"`

	// route disposition
	RouteDisposition string `json:"routeDisposition,omitempty"`
}

// Validate validates this b g p policydefinitionstatement actions
func (m *BGPPolicydefinitionstatementActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementActions) validateBgpActions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpActions) { // not required
		return nil
	}

	if m.BgpActions != nil {
		if err := m.BgpActions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policydefinitionstatement actions based on the context it is used
func (m *BGPPolicydefinitionstatementActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementActions) contextValidateBgpActions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpActions != nil {
		if err := m.BgpActions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActionsBgpActions b g p policydefinitionstatement actions bgp actions
//
// swagger:model BGPPolicydefinitionstatementActionsBgpActions
type BGPPolicydefinitionstatementActionsBgpActions struct {

	// set as path prepend
	SetAsPathPrepend *BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend `json:"setAsPathPrepend,omitempty"`

	// set community
	SetCommunity *BGPPolicydefinitionstatementActionsBgpActionsSetCommunity `json:"setCommunity,omitempty"`

	// set ext community
	SetExtCommunity *BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity `json:"setExtCommunity,omitempty"`

	// set large community
	SetLargeCommunity *BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity `json:"setLargeCommunity,omitempty"`

	// set local perf
	SetLocalPerf int64 `json:"setLocalPerf,omitempty"`

	// set med
	SetMed string `json:"setMed,omitempty"`

	// set next hop
	SetNextHop string `json:"setNextHop,omitempty"`
}

// Validate validates this b g p policydefinitionstatement actions bgp actions
func (m *BGPPolicydefinitionstatementActionsBgpActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSetAsPathPrepend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetExtCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetLargeCommunity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) validateSetAsPathPrepend(formats strfmt.Registry) error {
	if swag.IsZero(m.SetAsPathPrepend) { // not required
		return nil
	}

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) validateSetCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetCommunity) { // not required
		return nil
	}

	if m.SetCommunity != nil {
		if err := m.SetCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) validateSetExtCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetExtCommunity) { // not required
		return nil
	}

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) validateSetLargeCommunity(formats strfmt.Registry) error {
	if swag.IsZero(m.SetLargeCommunity) { // not required
		return nil
	}

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policydefinitionstatement actions bgp actions based on the context it is used
func (m *BGPPolicydefinitionstatementActionsBgpActions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSetAsPathPrepend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetExtCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetLargeCommunity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) contextValidateSetAsPathPrepend(ctx context.Context, formats strfmt.Registry) error {

	if m.SetAsPathPrepend != nil {
		if err := m.SetAsPathPrepend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setAsPathPrepend")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) contextValidateSetCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetCommunity != nil {
		if err := m.SetCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) contextValidateSetExtCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetExtCommunity != nil {
		if err := m.SetExtCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setExtCommunity")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementActionsBgpActions) contextValidateSetLargeCommunity(ctx context.Context, formats strfmt.Registry) error {

	if m.SetLargeCommunity != nil {
		if err := m.SetLargeCommunity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + "bgpActions" + "." + "setLargeCommunity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActions) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActionsBgpActions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend b g p policydefinitionstatement actions bgp actions set as path prepend
//
// swagger:model BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend
type BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend struct {

	// as
	As string `json:"as,omitempty"`

	// repeat n
	RepeatN int64 `json:"repeatN,omitempty"`
}

// Validate validates this b g p policydefinitionstatement actions bgp actions set as path prepend
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement actions bgp actions set as path prepend based on context it is used
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActionsBgpActionsSetAsPathPrepend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActionsBgpActionsSetCommunity b g p policydefinitionstatement actions bgp actions set community
//
// swagger:model BGPPolicydefinitionstatementActionsBgpActionsSetCommunity
type BGPPolicydefinitionstatementActionsBgpActionsSetCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policydefinitionstatement actions bgp actions set community
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement actions bgp actions set community based on context it is used
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActionsBgpActionsSetCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity b g p policydefinitionstatement actions bgp actions set ext community
//
// swagger:model BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity
type BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policydefinitionstatement actions bgp actions set ext community
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement actions bgp actions set ext community based on context it is used
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActionsBgpActionsSetExtCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity b g p policydefinitionstatement actions bgp actions set large community
//
// swagger:model BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity
type BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity struct {

	// options
	Options string `json:"options,omitempty"`

	// set community method
	SetCommunityMethod []string `json:"setCommunityMethod"`
}

// Validate validates this b g p policydefinitionstatement actions bgp actions set large community
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement actions bgp actions set large community based on context it is used
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementActionsBgpActionsSetLargeCommunity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditions b g p policydefinitionstatement conditions
//
// swagger:model BGPPolicydefinitionstatementConditions
type BGPPolicydefinitionstatementConditions struct {

	// bgp conditions
	BgpConditions *BGPPolicydefinitionstatementConditionsBgpConditions `json:"bgpConditions,omitempty"`

	// match neighbor set
	MatchNeighborSet *BGPPolicydefinitionstatementConditionsMatchNeighborSet `json:"matchNeighborSet,omitempty"`

	// match prefix set
	MatchPrefixSet *BGPPolicydefinitionstatementConditionsMatchPrefixSet `json:"matchPrefixSet,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions
func (m *BGPPolicydefinitionstatementConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBgpConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchNeighborSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchPrefixSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementConditions) validateBgpConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.BgpConditions) { // not required
		return nil
	}

	if m.BgpConditions != nil {
		if err := m.BgpConditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditions) validateMatchNeighborSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchNeighborSet) { // not required
		return nil
	}

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditions) validateMatchPrefixSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchPrefixSet) { // not required
		return nil
	}

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policydefinitionstatement conditions based on the context it is used
func (m *BGPPolicydefinitionstatementConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBgpConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchNeighborSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchPrefixSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementConditions) contextValidateBgpConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.BgpConditions != nil {
		if err := m.BgpConditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditions) contextValidateMatchNeighborSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchNeighborSet != nil {
		if err := m.MatchNeighborSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchNeighborSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchNeighborSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditions) contextValidateMatchPrefixSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchPrefixSet != nil {
		if err := m.MatchPrefixSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "matchPrefixSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "matchPrefixSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditions b g p policydefinitionstatement conditions bgp conditions
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditions
type BGPPolicydefinitionstatementConditionsBgpConditions struct {

	// afi safi in
	AfiSafiIn []string `json:"afiSafiIn"`

	// as path length
	AsPathLength *BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength `json:"asPathLength,omitempty"`

	// match as path set
	MatchAsPathSet *BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet `json:"matchAsPathSet,omitempty"`

	// match community set
	MatchCommunitySet *BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet `json:"matchCommunitySet,omitempty"`

	// match ext community set
	MatchExtCommunitySet *BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet `json:"matchExtCommunitySet,omitempty"`

	// match large community set
	MatchLargeCommunitySet *BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet `json:"matchLargeCommunitySet,omitempty"`

	// next hop in list
	NextHopInList []string `json:"nextHopInList"`

	// route type
	RouteType string `json:"routeType,omitempty"`

	// rpki
	Rpki string `json:"rpki,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions
func (m *BGPPolicydefinitionstatementConditionsBgpConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsPathLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchAsPathSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchExtCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchLargeCommunitySet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) validateAsPathLength(formats strfmt.Registry) error {
	if swag.IsZero(m.AsPathLength) { // not required
		return nil
	}

	if m.AsPathLength != nil {
		if err := m.AsPathLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) validateMatchAsPathSet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchAsPathSet) { // not required
		return nil
	}

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) validateMatchCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchCommunitySet) { // not required
		return nil
	}

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) validateMatchExtCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchExtCommunitySet) { // not required
		return nil
	}

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) validateMatchLargeCommunitySet(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchLargeCommunitySet) { // not required
		return nil
	}

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this b g p policydefinitionstatement conditions bgp conditions based on the context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsPathLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchAsPathSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchExtCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchLargeCommunitySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) contextValidateAsPathLength(ctx context.Context, formats strfmt.Registry) error {

	if m.AsPathLength != nil {
		if err := m.AsPathLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "asPathLength")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) contextValidateMatchAsPathSet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchAsPathSet != nil {
		if err := m.MatchAsPathSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchAsPathSet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) contextValidateMatchCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchCommunitySet != nil {
		if err := m.MatchCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) contextValidateMatchExtCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchExtCommunitySet != nil {
		if err := m.MatchExtCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchExtCommunitySet")
			}
			return err
		}
	}

	return nil
}

func (m *BGPPolicydefinitionstatementConditionsBgpConditions) contextValidateMatchLargeCommunitySet(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchLargeCommunitySet != nil {
		if err := m.MatchLargeCommunitySet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("conditions" + "." + "bgpConditions" + "." + "matchLargeCommunitySet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditions) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength b g p policydefinitionstatement conditions bgp conditions as path length
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength
type BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength struct {

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions as path length
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions bgp conditions as path length based on context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditionsAsPathLength
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet b g p policydefinitionstatement conditions bgp conditions match as path set
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet
type BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet struct {

	// as path set
	AsPathSet string `json:"asPathSet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions match as path set
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions bgp conditions match as path set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditionsMatchAsPathSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet b g p policydefinitionstatement conditions bgp conditions match community set
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet
type BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions match community set
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions bgp conditions match community set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditionsMatchCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet b g p policydefinitionstatement conditions bgp conditions match ext community set
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet
type BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions match ext community set
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions bgp conditions match ext community set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditionsMatchExtCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet b g p policydefinitionstatement conditions bgp conditions match large community set
//
// swagger:model BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet
type BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet struct {

	// community set
	CommunitySet string `json:"communitySet,omitempty"`

	// match set options
	MatchSetOptions string `json:"matchSetOptions,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions bgp conditions match large community set
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions bgp conditions match large community set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsBgpConditionsMatchLargeCommunitySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsMatchNeighborSet b g p policydefinitionstatement conditions match neighbor set
//
// swagger:model BGPPolicydefinitionstatementConditionsMatchNeighborSet
type BGPPolicydefinitionstatementConditionsMatchNeighborSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// neighbor set
	NeighborSet string `json:"neighborSet,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions match neighbor set
func (m *BGPPolicydefinitionstatementConditionsMatchNeighborSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions match neighbor set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsMatchNeighborSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsMatchNeighborSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsMatchNeighborSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsMatchNeighborSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPPolicydefinitionstatementConditionsMatchPrefixSet b g p policydefinitionstatement conditions match prefix set
//
// swagger:model BGPPolicydefinitionstatementConditionsMatchPrefixSet
type BGPPolicydefinitionstatementConditionsMatchPrefixSet struct {

	// match set option
	MatchSetOption string `json:"matchSetOption,omitempty"`

	// prefix set
	PrefixSet string `json:"prefixSet,omitempty"`
}

// Validate validates this b g p policydefinitionstatement conditions match prefix set
func (m *BGPPolicydefinitionstatementConditionsMatchPrefixSet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this b g p policydefinitionstatement conditions match prefix set based on context it is used
func (m *BGPPolicydefinitionstatementConditionsMatchPrefixSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsMatchPrefixSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPPolicydefinitionstatementConditionsMatchPrefixSet) UnmarshalBinary(b []byte) error {
	var res BGPPolicydefinitionstatementConditionsMatchPrefixSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
