// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EpDistTrafficMetrics ep dist traffic metrics
//
// swagger:model EpDistTrafficMetrics
type EpDistTrafficMetrics map[string][]EpDistTrafficMetricsItems0

// Validate validates this ep dist traffic metrics
func (m EpDistTrafficMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if err := validate.Required(k, "body", m[k]); err != nil {
			return err
		}

		for i := 0; i < len(m[k]); i++ {

			if err := m[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ep dist traffic metrics based on the context it is used
func (m EpDistTrafficMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for k := range m {

		for i := 0; i < len(m[k]); i++ {

			if err := m[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// EpDistTrafficMetricsItems0 ep dist traffic metrics items0
//
// swagger:model EpDistTrafficMetricsItems0
type EpDistTrafficMetricsItems0 struct {

	// dip
	Dip string `json:"dip,omitempty"`

	// ratio
	Ratio float64 `json:"ratio,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this ep dist traffic metrics items0
func (m *EpDistTrafficMetricsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ep dist traffic metrics items0 based on context it is used
func (m *EpDistTrafficMetricsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EpDistTrafficMetricsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EpDistTrafficMetricsItems0) UnmarshalBinary(b []byte) error {
	var res EpDistTrafficMetricsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
