// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sConntrackEntry k8s conntrack entry
//
// swagger:model K8sConntrackEntry
type K8sConntrackEntry struct {

	// Packet bytes of the conntrack
	Bytes int64 `json:"bytes,omitempty"`

	// value for Conntrack Act
	ConntrackAct string `json:"conntrackAct,omitempty"`

	// value for Conntrack state
	ConntrackState string `json:"conntrackState,omitempty"`

	// IP address for externel access
	DestinationIP string `json:"destinationIP,omitempty"`

	// Namespace of the destination
	DestinationNamespace string `json:"destinationNamespace,omitempty"`

	// Node of the destination
	DestinationNode string `json:"destinationNode,omitempty"`

	// Pod name of the destination
	DestinationPod string `json:"destinationPod,omitempty"`

	// port number for the access
	DestinationPort int64 `json:"destinationPort,omitempty"`

	// value for Conntrack ident
	Ident string `json:"ident,omitempty"`

	// K8s service name
	K8sservName string `json:"k8sservName,omitempty"`

	// Packet counts of the conntrack
	Packets int64 `json:"packets,omitempty"`

	// value for access protocol
	Protocol string `json:"protocol,omitempty"`

	// Connection's Service Name
	ServName string `json:"servName,omitempty"`

	// IP address for externel access
	SourceIP string `json:"sourceIP,omitempty"`

	// Namespace of the source
	SourceNamespace string `json:"sourceNamespace,omitempty"`

	// Node of the source
	SourceNode string `json:"sourceNode,omitempty"`

	// Pod name of the soruce
	SourcePod string `json:"sourcePod,omitempty"`

	// port number for the access
	SourcePort int64 `json:"sourcePort,omitempty"`
}

// Validate validates this k8s conntrack entry
func (m *K8sConntrackEntry) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this k8s conntrack entry based on context it is used
func (m *K8sConntrackEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *K8sConntrackEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sConntrackEntry) UnmarshalBinary(b []byte) error {
	var res K8sConntrackEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
