// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VxlanEntry vxlan entry
//
// swagger:model VxlanEntry
type VxlanEntry struct {

	// ep intf
	// Required: true
	EpIntf *string `json:"epIntf"`

	// peer IP
	// Required: true
	PeerIP []string `json:"peerIP"`

	// vxlan ID
	// Required: true
	VxlanID *int64 `json:"vxlanID"`

	// vxlan name
	// Required: true
	VxlanName *string `json:"vxlanName"`
}

// Validate validates this vxlan entry
func (m *VxlanEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEpIntf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVxlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVxlanName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VxlanEntry) validateEpIntf(formats strfmt.Registry) error {

	if err := validate.Required("epIntf", "body", m.EpIntf); err != nil {
		return err
	}

	return nil
}

func (m *VxlanEntry) validatePeerIP(formats strfmt.Registry) error {

	if err := validate.Required("peerIP", "body", m.PeerIP); err != nil {
		return err
	}

	return nil
}

func (m *VxlanEntry) validateVxlanID(formats strfmt.Registry) error {

	if err := validate.Required("vxlanID", "body", m.VxlanID); err != nil {
		return err
	}

	return nil
}

func (m *VxlanEntry) validateVxlanName(formats strfmt.Registry) error {

	if err := validate.Required("vxlanName", "body", m.VxlanName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vxlan entry based on context it is used
func (m *VxlanEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VxlanEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VxlanEntry) UnmarshalBinary(b []byte) error {
	var res VxlanEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
