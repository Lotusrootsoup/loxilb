// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConfigVlanVlanIDHandlerFunc turns a function with the right signature into a delete config vlan vlan ID handler
type DeleteConfigVlanVlanIDHandlerFunc func(DeleteConfigVlanVlanIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConfigVlanVlanIDHandlerFunc) Handle(params DeleteConfigVlanVlanIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteConfigVlanVlanIDHandler interface for that can handle valid delete config vlan vlan ID params
type DeleteConfigVlanVlanIDHandler interface {
	Handle(DeleteConfigVlanVlanIDParams, interface{}) middleware.Responder
}

// NewDeleteConfigVlanVlanID creates a new http.Handler for the delete config vlan vlan ID operation
func NewDeleteConfigVlanVlanID(ctx *middleware.Context, handler DeleteConfigVlanVlanIDHandler) *DeleteConfigVlanVlanID {
	return &DeleteConfigVlanVlanID{Context: ctx, Handler: handler}
}

/*
	DeleteConfigVlanVlanID swagger:route DELETE /config/vlan/{vlan_id} deleteConfigVlanVlanId

# Delete vlan in the device

Delete vlan in the device
*/
type DeleteConfigVlanVlanID struct {
	Context *middleware.Context
	Handler DeleteConfigVlanVlanIDHandler
}

func (o *DeleteConfigVlanVlanID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConfigVlanVlanIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
