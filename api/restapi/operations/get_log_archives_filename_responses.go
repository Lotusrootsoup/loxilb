// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/loxilb-io/loxilb/api/models"
)

// GetLogArchivesFilenameOKCode is the HTTP code returned for type GetLogArchivesFilenameOK
const GetLogArchivesFilenameOKCode int = 200

/*
GetLogArchivesFilenameOK Log archive file download

swagger:response getLogArchivesFilenameOK
*/
type GetLogArchivesFilenameOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetLogArchivesFilenameOK creates GetLogArchivesFilenameOK with default headers values
func NewGetLogArchivesFilenameOK() *GetLogArchivesFilenameOK {

	return &GetLogArchivesFilenameOK{}
}

// WithPayload adds the payload to the get log archives filename o k response
func (o *GetLogArchivesFilenameOK) WithPayload(payload io.ReadCloser) *GetLogArchivesFilenameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log archives filename o k response
func (o *GetLogArchivesFilenameOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogArchivesFilenameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLogArchivesFilenameBadRequestCode is the HTTP code returned for type GetLogArchivesFilenameBadRequest
const GetLogArchivesFilenameBadRequestCode int = 400

/*
GetLogArchivesFilenameBadRequest Missing or invalid filename

swagger:response getLogArchivesFilenameBadRequest
*/
type GetLogArchivesFilenameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLogArchivesFilenameBadRequest creates GetLogArchivesFilenameBadRequest with default headers values
func NewGetLogArchivesFilenameBadRequest() *GetLogArchivesFilenameBadRequest {

	return &GetLogArchivesFilenameBadRequest{}
}

// WithPayload adds the payload to the get log archives filename bad request response
func (o *GetLogArchivesFilenameBadRequest) WithPayload(payload *models.Error) *GetLogArchivesFilenameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log archives filename bad request response
func (o *GetLogArchivesFilenameBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogArchivesFilenameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLogArchivesFilenameNotFoundCode is the HTTP code returned for type GetLogArchivesFilenameNotFound
const GetLogArchivesFilenameNotFoundCode int = 404

/*
GetLogArchivesFilenameNotFound File not found

swagger:response getLogArchivesFilenameNotFound
*/
type GetLogArchivesFilenameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLogArchivesFilenameNotFound creates GetLogArchivesFilenameNotFound with default headers values
func NewGetLogArchivesFilenameNotFound() *GetLogArchivesFilenameNotFound {

	return &GetLogArchivesFilenameNotFound{}
}

// WithPayload adds the payload to the get log archives filename not found response
func (o *GetLogArchivesFilenameNotFound) WithPayload(payload *models.Error) *GetLogArchivesFilenameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log archives filename not found response
func (o *GetLogArchivesFilenameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogArchivesFilenameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetLogArchivesFilenameInternalServerErrorCode is the HTTP code returned for type GetLogArchivesFilenameInternalServerError
const GetLogArchivesFilenameInternalServerErrorCode int = 500

/*
GetLogArchivesFilenameInternalServerError Internal server error

swagger:response getLogArchivesFilenameInternalServerError
*/
type GetLogArchivesFilenameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetLogArchivesFilenameInternalServerError creates GetLogArchivesFilenameInternalServerError with default headers values
func NewGetLogArchivesFilenameInternalServerError() *GetLogArchivesFilenameInternalServerError {

	return &GetLogArchivesFilenameInternalServerError{}
}

// WithPayload adds the payload to the get log archives filename internal server error response
func (o *GetLogArchivesFilenameInternalServerError) WithPayload(payload *models.Error) *GetLogArchivesFilenameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get log archives filename internal server error response
func (o *GetLogArchivesFilenameInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLogArchivesFilenameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
