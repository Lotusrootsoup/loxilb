// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetricsLbrulecountHandlerFunc turns a function with the right signature into a get metrics lbrulecount handler
type GetMetricsLbrulecountHandlerFunc func(GetMetricsLbrulecountParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetricsLbrulecountHandlerFunc) Handle(params GetMetricsLbrulecountParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetMetricsLbrulecountHandler interface for that can handle valid get metrics lbrulecount params
type GetMetricsLbrulecountHandler interface {
	Handle(GetMetricsLbrulecountParams, interface{}) middleware.Responder
}

// NewGetMetricsLbrulecount creates a new http.Handler for the get metrics lbrulecount operation
func NewGetMetricsLbrulecount(ctx *middleware.Context, handler GetMetricsLbrulecountHandler) *GetMetricsLbrulecount {
	return &GetMetricsLbrulecount{Context: ctx, Handler: handler}
}

/*
	GetMetricsLbrulecount swagger:route GET /metrics/lbrulecount getMetricsLbrulecount

# Get load balancer rule count metrics

Get metrics related to load balancer rule counts.
*/
type GetMetricsLbrulecount struct {
	Context *middleware.Context
	Handler GetMetricsLbrulecountHandler
}

func (o *GetMetricsLbrulecount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetricsLbrulecountParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
