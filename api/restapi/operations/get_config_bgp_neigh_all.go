// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/loxilb-io/loxilb/api/models"
)

// GetConfigBgpNeighAllHandlerFunc turns a function with the right signature into a get config bgp neigh all handler
type GetConfigBgpNeighAllHandlerFunc func(GetConfigBgpNeighAllParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConfigBgpNeighAllHandlerFunc) Handle(params GetConfigBgpNeighAllParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetConfigBgpNeighAllHandler interface for that can handle valid get config bgp neigh all params
type GetConfigBgpNeighAllHandler interface {
	Handle(GetConfigBgpNeighAllParams, interface{}) middleware.Responder
}

// NewGetConfigBgpNeighAll creates a new http.Handler for the get config bgp neigh all operation
func NewGetConfigBgpNeighAll(ctx *middleware.Context, handler GetConfigBgpNeighAllHandler) *GetConfigBgpNeighAll {
	return &GetConfigBgpNeighAll{Context: ctx, Handler: handler}
}

/*
	GetConfigBgpNeighAll swagger:route GET /config/bgp/neigh/all getConfigBgpNeighAll

# Get the all of BGP Neighbor

Get the all of BGP Neighbor
*/
type GetConfigBgpNeighAll struct {
	Context *middleware.Context
	Handler GetConfigBgpNeighAllHandler
}

func (o *GetConfigBgpNeighAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetConfigBgpNeighAllParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetConfigBgpNeighAllOKBody get config bgp neigh all o k body
//
// swagger:model GetConfigBgpNeighAllOKBody
type GetConfigBgpNeighAllOKBody struct {

	// bgp nei attr
	BgpNeiAttr []*models.BGPNeighGetEntry `json:"bgpNeiAttr"`
}

// Validate validates this get config bgp neigh all o k body
func (o *GetConfigBgpNeighAllOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBgpNeiAttr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigBgpNeighAllOKBody) validateBgpNeiAttr(formats strfmt.Registry) error {
	if swag.IsZero(o.BgpNeiAttr) { // not required
		return nil
	}

	for i := 0; i < len(o.BgpNeiAttr); i++ {
		if swag.IsZero(o.BgpNeiAttr[i]) { // not required
			continue
		}

		if o.BgpNeiAttr[i] != nil {
			if err := o.BgpNeiAttr[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConfigBgpNeighAllOK" + "." + "bgpNeiAttr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConfigBgpNeighAllOK" + "." + "bgpNeiAttr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get config bgp neigh all o k body based on the context it is used
func (o *GetConfigBgpNeighAllOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBgpNeiAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigBgpNeighAllOKBody) contextValidateBgpNeiAttr(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.BgpNeiAttr); i++ {

		if o.BgpNeiAttr[i] != nil {
			if err := o.BgpNeiAttr[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConfigBgpNeighAllOK" + "." + "bgpNeiAttr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConfigBgpNeighAllOK" + "." + "bgpNeiAttr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConfigBgpNeighAllOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConfigBgpNeighAllOKBody) UnmarshalBinary(b []byte) error {
	var res GetConfigBgpNeighAllOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
