// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetOauthProviderTokenHandlerFunc turns a function with the right signature into a get oauth provider token handler
type GetOauthProviderTokenHandlerFunc func(GetOauthProviderTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOauthProviderTokenHandlerFunc) Handle(params GetOauthProviderTokenParams) middleware.Responder {
	return fn(params)
}

// GetOauthProviderTokenHandler interface for that can handle valid get oauth provider token params
type GetOauthProviderTokenHandler interface {
	Handle(GetOauthProviderTokenParams) middleware.Responder
}

// NewGetOauthProviderToken creates a new http.Handler for the get oauth provider token operation
func NewGetOauthProviderToken(ctx *middleware.Context, handler GetOauthProviderTokenHandler) *GetOauthProviderToken {
	return &GetOauthProviderToken{Context: ctx, Handler: handler}
}

/*
	GetOauthProviderToken swagger:route GET /oauth/{provider}/token auth getOauthProviderToken

# OAuth callback

Handles the OAuth token refresh workflow for the specified provider.
*/
type GetOauthProviderToken struct {
	Context *middleware.Context
	Handler GetOauthProviderTokenHandler
}

func (o *GetOauthProviderToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetOauthProviderTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
