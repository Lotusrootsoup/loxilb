// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/loxilb-io/loxilb/api/models"
)

// GetOauthProviderTokenOKCode is the HTTP code returned for type GetOauthProviderTokenOK
const GetOauthProviderTokenOKCode int = 200

/*
GetOauthProviderTokenOK OK

swagger:response getOauthProviderTokenOK
*/
type GetOauthProviderTokenOK struct {

	/*
	  In: Body
	*/
	Payload *models.OauthTokenResponse `json:"body,omitempty"`
}

// NewGetOauthProviderTokenOK creates GetOauthProviderTokenOK with default headers values
func NewGetOauthProviderTokenOK() *GetOauthProviderTokenOK {

	return &GetOauthProviderTokenOK{}
}

// WithPayload adds the payload to the get oauth provider token o k response
func (o *GetOauthProviderTokenOK) WithPayload(payload *models.OauthTokenResponse) *GetOauthProviderTokenOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth provider token o k response
func (o *GetOauthProviderTokenOK) SetPayload(payload *models.OauthTokenResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauthProviderTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOauthProviderTokenBadRequestCode is the HTTP code returned for type GetOauthProviderTokenBadRequest
const GetOauthProviderTokenBadRequestCode int = 400

/*
GetOauthProviderTokenBadRequest Bad Request

swagger:response getOauthProviderTokenBadRequest
*/
type GetOauthProviderTokenBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.OauthErrorResponse `json:"body,omitempty"`
}

// NewGetOauthProviderTokenBadRequest creates GetOauthProviderTokenBadRequest with default headers values
func NewGetOauthProviderTokenBadRequest() *GetOauthProviderTokenBadRequest {

	return &GetOauthProviderTokenBadRequest{}
}

// WithPayload adds the payload to the get oauth provider token bad request response
func (o *GetOauthProviderTokenBadRequest) WithPayload(payload *models.OauthErrorResponse) *GetOauthProviderTokenBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth provider token bad request response
func (o *GetOauthProviderTokenBadRequest) SetPayload(payload *models.OauthErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauthProviderTokenBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOauthProviderTokenInternalServerErrorCode is the HTTP code returned for type GetOauthProviderTokenInternalServerError
const GetOauthProviderTokenInternalServerErrorCode int = 500

/*
GetOauthProviderTokenInternalServerError Internal Server Error

swagger:response getOauthProviderTokenInternalServerError
*/
type GetOauthProviderTokenInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.OauthErrorResponse `json:"body,omitempty"`
}

// NewGetOauthProviderTokenInternalServerError creates GetOauthProviderTokenInternalServerError with default headers values
func NewGetOauthProviderTokenInternalServerError() *GetOauthProviderTokenInternalServerError {

	return &GetOauthProviderTokenInternalServerError{}
}

// WithPayload adds the payload to the get oauth provider token internal server error response
func (o *GetOauthProviderTokenInternalServerError) WithPayload(payload *models.OauthErrorResponse) *GetOauthProviderTokenInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth provider token internal server error response
func (o *GetOauthProviderTokenInternalServerError) SetPayload(payload *models.OauthErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauthProviderTokenInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
